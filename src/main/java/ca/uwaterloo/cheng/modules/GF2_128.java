/*
 By Leonid Reyzin

 This is free and unencumbered software released into the public domain.

 Anyone is free to copy, modify, publish, use, compile, sell, or
 distribute this software, either in source code form or as a compiled
 binary, for any purpose, commercial or non-commercial, and by any
 means.

 In jurisdictions that recognize copyright laws, the author or authors
 of this software dedicate any and all copyright interest in the
 software to the public domain. We make this dedication for the benefit
 of the public at large and to the detriment of our heirs and
 successors. We intend this dedication to be an overt act of
 relinquishment in perpetuity of all present and future rights to this
 software under copyright law.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.

 For more information, please refer to <http://unlicense.org>
 */
package ca.uwaterloo.cheng.modules;

public class GF2_128 {
    private final long [] word = new long[2];

    /**
     *
     * @param that the field element with which to compare
     * @return true if and only if this and that represent the same field element
     */
    public boolean equals(GF2_128 that) {
        return this.word[0]==that.word[0] && this.word[1]==that.word[1];
    }

    // using irreducible polynomial x^128+x^7+x^2+x+1
    // We need only the last word
    static private final long irredPentanomial = (1L<<7) | (1L<<2) | (1L<<1) | 1L;

    // irredPentanomial times 0, 1, x, x+1, x^2, x^2+1, x^2+x, x^2+x+1, x^3, x^3+1, x^3+x, x^3+x+1, x^3+x^2, x^3+x^2+1, x^3+x^2+x, x^3+x^2x+1,
    // Need only the last word, because the first word is 0
    static private final long [] irredMuls = {0L, irredPentanomial, irredPentanomial<<1, (irredPentanomial<<1)^irredPentanomial,
            irredPentanomial<<2, (irredPentanomial<<2)^irredPentanomial, (irredPentanomial<<2)^(irredPentanomial<<1), (irredPentanomial<<2)^(irredPentanomial<<1)^irredPentanomial,
            irredPentanomial<<3, (irredPentanomial<<3)^irredPentanomial, (irredPentanomial<<3)^(irredPentanomial<<1), (irredPentanomial<<3)^(irredPentanomial<<1)^irredPentanomial,
            (irredPentanomial<<3)^(irredPentanomial<<2), (irredPentanomial<<3)^(irredPentanomial<<2)^irredPentanomial, (irredPentanomial<<3)^(irredPentanomial<<2)^(irredPentanomial<<1), (irredPentanomial<<3)^(irredPentanomial<<2)^(irredPentanomial<<1)^irredPentanomial

    };

    /**
     * returns the 0 field element
     */
    public GF2_128() {
    }

    /**
     * returns a copy of the field element
     * @param that element to copy
     */
    public GF2_128(GF2_128 that) {
        this.word[0] = that.word[0];
        this.word[1] = that.word[1];
    }

    /**
     * returns the field element whose 32 least significant bits are bits of that and rest are 0
     * @param that lower 32 bits
     */
    public GF2_128(int that) {
        this.word[0] = ((long) that) & 0xFFFFFFFFL;
    }

    /**
     * returns the field element whose bits are given by the long array
     * @param that must be length 2
     */
    public GF2_128(long [] that) {
        assert (that.length == 2);
        this.word[0] = that[0];
        this.word[1] = that[1];
    }

    /**
     * returns the field element whose bits are given by the byte array that
     * @param that must be length 16
     */
    public GF2_128(byte [] that) {
        this(that, 0);
    }

    /**
     * returns the field element whose bits are given by the byte array that[pos]...that[pos+15]
     * @param that must be length at least pos+16
     */
    public GF2_128(byte [] that, int pos) {
        assert (that.length >= pos+16);
        for (int i = 0; i<8; i++) {
            word[0] |= (((long)that[i+pos] & 0xFF))<<(i<<3);
        }
        for (int i = 0; i<8; i++) {
            word[1] |= (((long)that[i+pos+8] & 0xFF))<<(i<<3);
        }
    }

    /**
     *
     * @return byte array of length 16 containing the two words of the field element
     */
    public byte[] toByteArray() {
        byte [] ret = new byte[16];
        toByteArray(ret, 0);
        return ret;
    }

    /**
     * @param ret bytes of the field element will go into ret[pos]...ret[pos+15]
     */
    public void toByteArray(byte[] ret, int pos) {
        assert(ret.length>=pos+16);
        for (int j = 0; j<2; j++) {
            for (int i = 0; i < 8; i++) {
                ret[pos+i+8*j] = (byte) ((word[j] >> (i << 3)) & 0xFF);
            }
        }
    }


    /**
     *
     * @return long array of length 2 containing the two words of the field element
     */
    public long [] toLongArray() {
        long [] ret = new long[2];
        ret[0] = word[0];
        ret[1] = word[1];
        return ret;
    }


    /**
     *
     * @return true if this == 0, false otherwise
     */
    public boolean isZero () {
        return word[0]==0L && word[1]==0L;
    }

    /**
     *
     * @return true if this == 1, false otherwise
     */
    public boolean isOne () {
        return word[0]==1L && word[1]==0L;
    }

    /**
     * Computes a plus b and puts the result into res.
     * @param res output; must be not null; may be equal to a and/or b
     * @param a multiplicand; may be equal to res, in which case will get overwritten
     * @param b multiplier; may be equal to res, in which case will get overwritten
     */

    public static void add (GF2_128 res, GF2_128 a, GF2_128 b) {
        res.word[0] = a.word[0]^b.word[0];
        res.word[1] = a.word[1]^b.word[1];
    }


    /*************************************************************************************************
     * Note carefully:
     * two implementations of mul are provided
     * you MUST choose one and delete or rename the other, or else the code will not compile.
     *
     * The first one is is about 2.5 times faster than the second, but uses table lookups, which may not
     * preserve the secrecy of the inputs in case of side-channel attacks.
     *************************************************************************************************/

    /**
     * Computes a times b and puts the result into res.
     * Uses table lookups, which may not preserve
     * the secrecy of the inputs in case of side-channel attacks.
     *
     * @param res output; must be not null; may be equal to a and/or b
     * @param a multiplicand; may be equal to res, in which case will get overwritten
     * @param b multiplier; may be equal to res, in which case will get overwritten
     */
    public static void mul_extend (GF2_128 res, GF2_128 a, GF2_128 b) {

        // Implements a sort of times-x-and-add algorithm, except instead of multiplying by x
        // we multiply by x^4 and then add one of possible 16 precomputed values

        // contains a*0, a*1, a*x, a*(x+1), a*x^2, a*(x^2+1), a*(x^2+x), a*(x^2+x+1)
        // a*x^3, a*(x^3+1), a*(x^3+x), a*(x^3+x+1), a*(x^3+x^2), a*(x^3+x^2+1), a*(x^3+x^2+x), a*(x^3+x^2+x+1), all mod reduced
        // First word of each is in a0 muls, second word of each is in a1muls
        long []     a0muls = new long[16];
        long [] a1muls = new long[16];

        // a0muls[0] and a1muls[0] are already correctly initialized to 0


        a0muls[1] = a.word[0];
        a1muls[1] = a.word[1];

        // a*x, a*x^2, a*x^3
        for (int i = 2; i<=8; i*=2) {
            // multiply a*x^{log_2 i/2} by x to get a*x^{log_2 i}
            int prev = i / 2;
            a0muls[i] = a0muls[prev] << 1;
            a1muls[i] = (a1muls[prev] << 1) | (a0muls[prev] >>> 63);
            // mod reduce
            a0muls[i] ^= irredMuls[(int) (a1muls[prev] >>> 63)];
        }

        // a*(x+1)
        a0muls[3] = a0muls[1] ^ a0muls[2];
        a1muls[3] = a1muls[1] ^ a1muls[2];

        // a*(x^2+1), a*(x^2+x), a*(x^2+x+1)
        for (int i = 1; i<4; i++) {
            a0muls[4|i] = a0muls[4]^a0muls[i];
            a1muls[4|i] = a1muls[4]^a1muls[i];
        }

        // a*(x^3+1), a*(x^3+x), a*(x^3+x+1), a*(x^3+x^2), a*(x^3+x^2+1), a*(x^3+x^2+x), a*(x^3+x^2+x+1)
        for (int i = 1; i<8; i++) {
            a0muls[8|i] = a0muls[8]^a0muls[i];
            a1muls[8|i] = a1muls[8]^a1muls[i];
        }

        long w0 = 0, w1=0;
        for (int j = 1; j>=0; j--) {
            long multiplier = b.word[j];
            for (int i = 60; i >= 0; i -= 4) {
                // Multiply by x^4
                int modReduceIndex = (int) (w1 >>> 60);
                w1 = (w1 << 4) | (w0 >>> 60);
                // MOD REDUCE ACCORDING TO modReduceIndex by XORing the right value
                w0 = (w0 << 4) ^ irredMuls[modReduceIndex];

                // Add the correct multiple of a
                int index = (int) ((multiplier >>> i) & 15);
                w0 ^= a0muls[index];
                w1 ^= a1muls[index];
            }
        }
        res.word[0] = w0;
        res.word[1] = w1;
    }


    /**
     * Computes a times b and puts the result into res.
     * Uses no branching or data-dependent table lookups, to reduce exposure to side-channel attacks
     * when secrecy of a or b needs to be protected.
     * @param res output; must be not null; may be equal to a and/or b
     * @param a multiplicand; may be equal to res, in which case will get overwritten
     * @param b multiplier; may be equal to res, in which case will get overwritten
     */

    public static void mul(GF2_128 res, GF2_128 a, GF2_128 b) {
        long [] t = new long[2];
        long [] r = new long[4];

        // Standard Karatsuba multiplication
        // (A1x^64+A0)(B1x^64+B0) = A1B1 x^128 + (A1B0+A0B1)x^64 + A0B0 =
        // (A1+A0)(B1+B0)x^64 + A1B1(x^128-x^64) + A0B0(1-x^64) (plus is the same as minus -- just XOR -- in GF(2^128)
        //
        // Since we operate on 64 bits at a time, this becomes
        // r[3] = highTerm[1];
        // r[2] = highTerm[1]^highTerm[0]^midTerm[1]^lowTerm[1];
        // r[1] = highTerm[0]^midTerm[0]^lowTerm[1]^lowTerm[0];
        // r[0] = lowTerm[0];

        // high term
        karmul64(t, a.word[1], b.word[1]);
        r[3] = t[1];
        r[2] = t[1]^t[0];
        r[1] = t[0];

        // middle term
        karmul64(t,a.word[1]^a.word[0], b.word[1]^b.word[0]);
        r[2] ^= t[1];
        r[1] ^= t[0];

        // low term
        karmul64(t, a.word[0], b.word[0]);
        r[2] ^= t[1];
        r[1] ^= t[1]^t[0];
        r[0] = t[0];

        // Now do a modular reduction. Strategy:
        // 1. multiply the highest-order word by x^64 times the modulus x^128+x^7+x^2+x+1 and xor the result in
        //    (this will 0 out the highest order word, so we won't even compute it -- we'll just compute the other
        //    affected words -- which are the middle two words)
        //
        // 2. multiply the second-highest-order word by the modulus x^128+x^7+x^2+x+1 and xor the result in
        //    (this will 0 out the second-highest order word, so we won't even compute it -- we'll just compute
        //    the other affected words -- which are the last two words)
        //
        for (int i = 3; i>=2; i--) {
            long w = r[i];

            // Compute the second-lowest-order word of m*modulus and xor it into the appropriate word of r
            long s = (w>>>57)^(w>>>62)^(w>>>63);
            r[i-1]^=s;

            // Compute the lowest-order word of m*modulus and xor it into the appropriate word of r
            s = w^(w<<1)^(w<<2)^(w<<7);
            r[i-2] ^= s;
        }
        // Now the result is contained in the last two words
        res.word[1] = r[1];
        res.word[0] = r[0];
    }

    /**
     * Multiplies (without any modular reduction) two 64-bit polynomials over GF(2)
     * @param r The resulting 128-bit polynomial will be in r[1] and r[0] (r must have length at least 2)
     * @param a 64-bit multiplicand
     * @param b 64-bit multiplier
     */
    private static void karmul64(long [] r, long a, long b) {
        // Standard Karatsuba multiplication
        // (A1x^32+A0)(B1x^32+B0) = A1B1 x^64 + (A1B0+A0B1)x^32 + A0B0 =
        // (A1+A0)(B1+B0)x^32 + A1B1(x^64-x^32) + A0B0(1-x^32) (plus is the same as minus -- just XOR -- in GF(2^128)
        long b1 = b>>>32;
        long b0 = b&0xFFFFFFFFL;
        long a1 = a>>>32;
        long a0 = a&0xFFFFFFFFL;
        long highTerm = karmul32(a1, b1);
        long midTerm = karmul32(a1^a0, b1^b0);
        long lowTerm = karmul32(a0, b0);
        long t = highTerm^midTerm^lowTerm;
        r[1] = highTerm^(t>>>32);
        r[0] = lowTerm^(t<<32);
    }

    /**
     *
     * Multiplies (without any modular reduction) two 32-bit polynomials over GF(2)
     * @param a 32-bit multiplicand (contained in bits 0-31; bits 32-63 must be 0)
     * @param b 32-bit multiplier (contained in bits 0-31; bits 32-63 must be 0)
     * @return 64-bit result
     */
    private static long karmul32(long a, long b) {
        long res = 0L;
        for (int i=31; i>=0; i--) {
            res<<=1;
            res^=a*((b>>>i)&1);
        }
        return res;
    }

    /**
     * Computes a times b and puts the result into res. More efficient than mul(res, a, new GF2_128(b))
     * @param res output; must be not null; may be equal to a and/or b
     * @param a multiplicand; may be equal to res, in which case will get overwritten
     * @param b multiplier; may be equal to res, in which case will get overwritten
     */

    public static void mul (GF2_128 res, GF2_128 a, byte b) {

        long w0 = 0, w1 = 0, w2 = 0;

        for (int i = 7; i >= 0; i--) {
            w2 = w1 >>> 63;
            w1 = (w1 << 1) | (w0 >>> 63);
            w0 <<= 1;
            long t = (b >>> i) & 1;
            // the next two lines us multiplication by t rather than branching on t,
            // to reduce the chance of side-channel attacks
            w1 ^= a.word[1] * t;
            w0 ^= (a.word[0] * t) ^ (irredPentanomial * w2); // mod reduce
        }
        res.word[0] = w0;
        res.word[1] = w1;
    }


    /**
         * Computes z^{-1} and puts the result into res.
         * @param res output; must be not null; may be equal to z
         * @param z input to be raised to 2^16; may be equal to res, in which case will get overwritten
         */

    public static void invert (GF2_128 res, GF2_128 z) {
        // Computes z^{2^128-2} = z^{exponent written in binary as 127 ones followed by a single zero}
        // (by Fermat's little theorem, this is the correct inverse)

        // contains z raised to the power whose binary representation is 2^k ones
        GF2_128 zTo2ToK1s = new GF2_128(z);

        // Square res to get its exponent to be 10 in binary
        power2To2ToK(res, z, 0);

        // contains z raised to the power whose binary representation is 2^k ones followed by 2^k zeros
        GF2_128 zTo2ToK1s2ToK0s = new GF2_128(res);


        // Loop invariant
        // res contains z raised to the power whose binary representation is 2^{k+1}-1 ones followed by a single zero
        // zTo2ToK1s contains z raised to the power whose binary representation is 2^k ones
        // zTo2ToK1s2ToK0s contains z raised to the power whose binary representation is 2^k ones followed by 2^k zeros
        int k = 0;
        while (k<6) {
            k++;
            // Fill in the zeros in the exponent of zTo2ToK1s2ToK0s with ones
            mul(zTo2ToK1s, zTo2ToK1s2ToK0s, zTo2ToK1s);
            // zTo2ToK1s2ToK0s = power2To2ToK with 2^k zeros appended to the exponent
            power2To2ToK(zTo2ToK1s2ToK0s, zTo2ToK1s, k);
            // prepend 2^k ones to res
            mul(res, res, zTo2ToK1s2ToK0s);
        }
    }


    // These tables are used in power2To2ToK and sqr -- see explanation in power2To2ToK. They take up about about 14KB.
    //

    private static final long[][] powTable0 = {
            {1L, 4L, 16L, 64L, 256L, 1024L, 4096L, 16384L, 65536L, 262144L, 1048576L, 4194304L, 16777216L, 67108864L, 268435456L, 1073741824L, 4294967296L, 17179869184L, 68719476736L, 274877906944L, 1099511627776L, 4398046511104L, 17592186044416L, 70368744177664L, 281474976710656L, 1125899906842624L, 4503599627370496L, 18014398509481984L, 72057594037927936L, 288230376151711744L, 1152921504606846976L, 4611686018427387904L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 135L, 540L, 2160L, 8640L, 34560L, 138240L, 552960L, 2211840L, 8847360L, 35389440L, 141557760L, 566231040L, 2264924160L, 9059696640L, 36238786560L, 144955146240L, 579820584960L, 2319282339840L, 9277129359360L, 37108517437440L, 148434069749760L, 593736278999040L, 2374945115996160L, 9499780463984640L, 37999121855938560L, 151996487423754240L, 607985949695016960L, 2431943798780067840L, -8718968878589280256L, 2017612633061982208L, 8070450532247928832L, -4611686018427387904L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 270L, 1080L, 4199L,},
            {1L, 16L, 256L, 4096L, 65536L, 1048576L, 16777216L, 268435456L, 4294967296L, 68719476736L, 1099511627776L, 17592186044416L, 281474976710656L, 4503599627370496L, 72057594037927936L, 1152921504606846976L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 135L, 2160L, 34560L, 552960L, 8847360L, 141557760L, 2264924160L, 36238786560L, 579820584960L, 9277129359360L, 148434069749760L, 2374945115996160L, 37999121855938560L, 607985949695016960L, -8718968878589280256L, 8070450532247928832L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1080L, 16405L, 262480L, 4199680L, 67194880L, 1075118080L, 17201889280L, 275230228480L, 4403683655680L, 70458938490880L, 1127343015854080L, 18037488253665280L, 288599812058644480L, 4617596992938311680L, 94575592174780416L, 1513209474796486656L, 5764607523034234880L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 540L, 8640L, 138375L, 2214635L, 35434160L, 566946560L, 9071144960L, 145138319360L, 2322213109760L, 37155409756160L, 594486556098560L, 9511784897576960L, 152188558361231360L, 2435016933779701760L, 2066782793056124928L, -3824963458521104384L, -5859183115209015296L, -1513209474796486656L, -5764607523034234880L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 270L, 4199L, 65620L, 1048694L, 16777290L,},
            {1L, 65536L, 4294967296L, 281474976710656L, 0L, 0L, 0L, 0L, 135L, 8847360L, 579820584960L, 37999121855938560L, 0L, 0L, 0L, 0L, 16405L, 1075118080L, 70458938490880L, 4617596992938311680L, 0L, 0L, 0L, 0L, 2214635L, 145138319360L, 9511784897576960L, -3824963458521104384L, 0L, 0L, 0L, 4199L, 268435729L, 17592203935744L, 1152922677132918784L, 76842668642009088L, 0L, 0L, 0L, 552960L, 36238823415L, 2374947531325440L, 8070608823267622912L, -8072983807038324736L, 0L, 0L, 1080L, 67194880L, 4403688133701L, 288600105530228736L, 5783840476780036096L, 6072259672578981888L, 0L, 0L, 138375L, 9071137756L, 594486085783387L, 2066751970480947200L, -7784595809881817088L, -8116893903405187072L, 0L, 270L, 16777290L, 1099511627845L, 72057594037993729L, 4311810048L, 282578783305728L, 72339069014638592L, 0L, 34560L, 2264924160L, 148434069749895L, -8718968878580398201L, 582094356480L, 38148135746273280L, -8680969756733341696L, 0L, 4199680L, 275230228480L, 18037488253681685L, 1513209475875820821L, 70735243837440L, 4635704940130467840L, 6130806467734798336L, 8640L, 566946560L, 37155409756160L, 2435016933781924651L, -1513209329119911445L, 9547060033028096L, -1513172181595455488L, 2444047222778626048L, 1048694L, 68719546624L, 4503604207554663L, 300166943871232L, 1224996759836561425L, 1157443864920915968L, 1229500363472633856L, 1157706579210930288L, 141557895L, 9277138794240L, 607986568019867760L, 40522537422618480L, -646134085450172169L, 8680969174647242752L, -38147594580393984L, 8716435603799146832L, 17201906733L, 1127344162226488L, 94650720833590632L, 4923631783780892776L, 4685244537110860101L, 6130877201840930816L, 4635630379498209820L, 1244400872073244336L, 2322211272620L, 152188437960410523L, -5867073703402003989L, -608753751841641685L, 5021550739930207323L, 2435017087666290688L, -1503124363304435628L, -3144919910493192071L, 281474976710691L, 16L, 118L, 65641L,},
            {1L, 16405L, 268435729L, 4403688133701L, 72057594037993729L, 1513209475875820821L, 1224996759836561425L, 4685244537110860101L, 4295032833L, 70460013625365L, 1152940269605843217L, 6072259681583089561L, 72486403589538182L, 8403714980886724158L, 1193425423363075937L, -6644989002646882190L, 4294967297L, 70458938507285L, 1152922677401355561L, 5783836075801990159L, 72340448051527937L, 6144410812369167538L, 90147125893350910L, 94652888412251267L, 37717646888026132L, -8431301308056710813L, -8147464717008670356L, -4417531297724408560L, -7870441917717645178L, 5837906461116576584L, 2264465467521706223L, -6068914077392949047L, 134L, 2198270L, 35970387686L, 590093135108894L, -8791026472617343248L, -144115026309607149L, -1870849370449483710L, 4945082970842411698L, 114279416078925958L, -7021240601335062879L, -1225279338670215262L, 94576966853804288L, 1243015560670824565L, 4991467505199200984L, 6076570390930413852L, 6081212924142878628L, 8070678560920043792L, -8946962830989193112L, 3585812137802668261L, 4445896937221332381L, -5783858874389823231L, 888195067696397600L, 1731874195390421639L, -3584868081083141580L, -1557807788686185953L, -8756369272712026205L, 3460770532972170593L, 4067885689898829461L, 6699792145084565389L, 9001003346544384655L, 4532713748230188045L, -1097472669506915749L, 594486085799880L, -8718968878309962648L, -1513204901272552632L, -717654713058024728L, -2976842199340152888L, -1224960721641380760L, -6400468603355290833L, 8412032654198774504L, -8116821810831437939L, -7501297348488319974L, 3777734100442110356L, -1278114154081062498L, 9007468577847618636L, 7219484696410022195L, -8702410551921679001L, 6670342292045348709L, -7785083945448124472L, -7519272349818550192L, 4050143367636360123L, 7229181161483454308L, 9030007014003127967L, 2082686147856413389L, 7857063048084232503L, 8141821194141346557L, -2370008887506909375L, 5832983265701727270L, -6426641209866620530L, -5766844422745840536L, -1370308455120103759L, 8881646199480605702L, 6832889954420084344L, 2010624330624155600L, 72652080121603440L, -7926335308862185993L, -431766654856968086L, 3569711185302314987L, 7303187051972891023L, 3308803163768553443L, -8482274701826998155L, 4459593270218489115L, -122885804200715351L, 4094012947778724882L, 6943273620777611450L, 4117778572463796942L, 2131942649565220463L, 4111409492814473722L, -1758869457145051888L, -3469144614222368520L, -3832504818980417230L, 4744752709101740478L, 8425525482131229682L, -5242905317123659200L, 4991940871565216913L, -4629100202946215257L, 3788008165265323954L, -4423968905805501448L, 6390899103102090687L, -913585677988614016L, -7379876626815660255L, 4379154183722852615L, 8929986821820948755L, 4714433897021050480L, 1161943097144894557L, 5901163133421959647L,},
            {1L, 1265483017132502896L, -7798384319384749689L, 7105175173495992685L, -1557807788686251490L, 3320246870931305730L, -3474274409430310059L, -5001206296683293861L, -3832504814685449804L, 2805149652348395574L, -5035048239688903343L, -2292720295241332561L, 4454565412537176509L, -30186365658558855L, 7147370653905312645L, 6324641070245675409L, 6116353354739122873L, 2103383256567545235L, 1530187228019146080L, 3050732107520466336L, -372071414147998392L, -9023442656194909057L, -908565145395990044L, -5418995956140136772L, -4247615643663614439L, 8959373883251071213L, -7245680808434786086L, -2532893623749691453L, -3892712802749991022L, -3731652745298874684L, -8567726991297983924L, -687661556235581339L, 2414644016726825453L, -4861908909644595152L, -5548134135961724946L, -1845489530407974153L, -1815125113288154238L, -3687551908891454166L, -1139778266997257792L, -6967034369050392101L, -4143999622324367407L, 9104404284024032730L, -1480524984366144521L, -5331872543943400124L, 4593396335224792347L, -5840340895537297995L, -3578240254771389760L, -1811273867688421230L, 2577065727021345740L, 6025818221142826655L, 6976774937566668782L, 8730224677820046562L, -661784758521223193L, -4089406758740527550L, 1057825010632020758L, -9171207846247767622L, -4279509991574384312L, -6339272449689801259L, -6425269771059850960L, -4544113929402864476L, 5404697357896051257L, 7019419767171770291L, -7633650792478538789L, 1059147684704430102L, -7516149852976306611L, 4201776119579830468L, 4886727476448220356L, -3172447252725403052L, -8134504110700158369L, 430214370844458937L, 6370201469081514610L, 4235764997111026735L, -6803271038803967870L, 2221846108876976149L, -4778803481090696328L, -7963723012592162469L, -2341228858178568425L, 5856533695480450847L, -3063069353043398728L, 6938499655394748125L, -7490333596901602423L, -522229748463056215L, -6097535096858409546L, 273196630524851677L, -5309170478643051400L, -7083460326197703069L, -4980056281476326973L, 3699272585504864832L, -6193573533507521029L, -5949970440090863340L, -6754501934440594160L, 6193298554287612789L, 990687913682309906L, -1670834806155475764L, 1821108863207814591L, -5214634166075603821L, -6904438957689811379L, 4699212198102772888L, 1742379769318432210L, 5769223911255549085L, -6795586311141420702L, -5327057139415088278L, 483001498386758847L, -1535028901444231947L, -8681527484290181374L, 2940397091859153929L, 6634728987356286976L, 8867971772291537346L, 3948640495657062655L, -7654870305132345057L, 8040843234756707169L, 4834930064811706834L, 7642967683722109820L, -2681825718964906863L, -8597312452526248222L, 7026110394948056740L, -4812892200862477618L, 1290703843984844846L, 2882272516027258605L, 693576332714829905L, 3283242670198149775L, 4255442419155046722L, -700838462747642349L, 7833928250160575508L, -1867920449891456127L, -677788967207156063L, 2839393028491067334L, -6146058693146274302L,},
            {1L, 2411531331161097514L, -2447015176796264526L, 8715660544418885057L, -9220421751382574480L, 4200001169429336200L, 3964197370751190991L, -3341791499639567212L, 8076859863651638644L, -2462437682809262884L, 1719872949795981757L, 2625765074143763218L, 2230490829655855040L, 2776212414729506216L, 5302080551857166289L, -7243242588133284048L, 701341086026504100L, -8499368231304337601L, -7750310188632252326L, 1165901108305558365L, -1872372423054200342L, 1200010359520675000L, -4139608891882216368L, 1211461226026039822L, 4823549016708842962L, 3538988312291523480L, 247243113670268043L, -5958987013171156531L, -6892045542208614995L, -2007962731997477603L, -231816691098907034L, 5868988570841769033L, -6491267123734289186L, -155229256673533176L, -5554896581198249223L, 9106787790822234662L, 3700987981729724997L, -6553337258006548708L, 2331570796466207708L, -4246374571864407349L, -448664158226655899L, 1294856446065006152L, -7350688151844497046L, -5226070579698290862L, 7597309616592136694L, 68720019592672826L, -8674498029165542208L, 147802350846700251L, 2681402613220503745L, -2734706415296820613L, 2929762874017147222L, 7340598048542973762L, 5467735480220991126L, -5003550286335488805L, -3501312060816131079L, -120951133085098410L, -7001206111466759608L, 8828438075880397134L, 6366255257208555809L, 4881471298394144552L, -1162200725437770340L, -4907989930487786615L, -8603574003899003169L, 5296546900913520257L, -4480046259158931720L, 6817194572306109883L, 1049457292640903166L, 1205702900732745984L, -2689269747600456014L, -8613848674373532127L, -8427088908889376653L, -7238462660719145874L, 6967345427116013139L, -1723129366875528369L, 8360678515943072419L, -3380918549284480367L, 3704884397863300510L, -6263168383439824134L, 9019191473236524100L, -5533343970594641190L, -1153778694431925696L, 3657250033789875503L, -4507518266285444195L, 6956748127987910447L, -8508358579718999787L, -7076476874103950141L, 6861935607926531515L, 6959909498449169264L, 5692181671531343475L, -2813355376129858251L, 591000358533713671L, 5051512104514874504L, 4915915555208597043L, -3630986620746926356L, -5825109180421249300L, -552733828714474302L, 3668025340747053488L, 5100345030724565319L, -7428926003174248431L, -3277193745223925138L, 2555538801485383688L, -5821557771283760067L, 8166675337673012690L, 5858816317506423853L, -971217372764066498L, 5734249226659099717L, 2819044450496573569L, -7177510549192388384L, 4192261004336651070L, 6706966644508193076L, 164962355807559995L, -2396314275592926573L, 5752434225584898046L, 8423416002108414018L, -4505435170286210038L, -2724609743419091530L, 3351310525124109262L, 4251967790362444496L, -7953592497859097551L, -275751238756383441L, -1622539133573254459L, 9123447047066698120L, -5780101143427128043L, -7283323844865901584L, 6283647082281091094L, -3501457529761612537L, -2329550611601901823L, 6196749793832928056L,},
            {1L, 4964542009783261686L, 1027545047727221349L, 9185286436292121475L, -3134675225544318020L, 2877487077164832321L, -5488481435529350628L, -7522362070263192450L, 6182089976677770388L, -6005968843149236340L, -7087545347436871231L, -2586156082336627294L, -3948884450422757169L, -8059146364684308366L, 2534886018178305473L, 1436912227525277989L, 3117163893447152746L, 726486790490473478L, -4915191956805794707L, 962864073512071700L, 4578869367609421526L, -6520012988938451156L, 4518452660568125746L, -111040965603920966L, -8666233382503286156L, 8555398785986809225L, 3593688088946478004L, 7882770014571463539L, 1387202311892709703L, 3667136172917703397L, -8043589004372224685L, 3351019160338682892L, 8022536281148559210L, -1826729481369306022L, 5883983248664872854L, 200687406169543185L, -2021303549512600526L, -7178415504615027143L, -5329493831528696798L, -5384053893368743442L, 5786643022434982241L, 2129822445825019319L, 1744264094519024353L, 1981416690981462578L, 6910814590165925233L, 8907947641102291798L, 9028772825273071225L, 4231857422223471655L, -4529047231969665011L, -6120154076558730293L, -764539331562002812L, -5245017523261400330L, -1490671903905115180L, 8877399172892640847L, -6283536041476769136L, -5973299716728451011L, -7509239869592196796L, -7189977379569428904L, -9183773324059302724L, -1357326719254934275L, -733574010366068796L, 193878129075276312L, 8541429272638978746L, 8539724325092010994L, 4953168811375565877L, 6012801367171386718L, 8049064432158078364L, -2646465158170869482L, 3163176454608872140L, -5200880583340455560L, -7664098026197741460L, 4018780952856141394L, 2755234258661533153L, 2491228885239102395L, 7442241457581261023L, 1912072381707774493L, 1466832775481315669L, -8747888670113896074L, -3227219748318078947L, -8529434157930505290L, -3504434889264101906L, -3564641214530973658L, -6642359277094328344L, 1859176734615295188L, 7209335843581389526L, -3585987446509328542L, 7747398494847247693L, -8713595535820260781L, -5218447579338541348L, 1125653364649738200L, 1248962186024768771L, -3621320067713303371L, 2635719417274946005L, -1944994913195274954L, 6401245317616025584L, -2056852836544031325L, 8806472802951132644L, -7164909712549530143L, -1520965119215522557L, 6507669901447617101L, -3633132546680964483L, -834508664782218546L, -8037411999755944817L, 2837372838966764901L, -9109408918565985371L, 6253261801757816288L, -731490650736751907L, -8891030644586063271L, -2387713455397635001L, 6738025808833450412L, 3617796349351360530L, 2370894755859895576L, 5060859841891367202L, -5284150309067395604L, -234230414451448L, 8156544395106712347L, -1715342576938742872L, 529181474628956908L, -2833967573182999211L, 2846701389210593277L, 3534849102562928311L, -2773452078090449558L, 3284312421221553965L, 462647017425347885L, 9124662527423493714L, 1197725542829821811L, -4078010146579623027L, -1865376281277366856L,},
    };
    private static final long[][] powTable1 = {
            {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 4L, 16L, 64L, 256L, 1024L, 4096L, 16384L, 65536L, 262144L, 1048576L, 4194304L, 16777216L, 67108864L, 268435456L, 1073741824L, 4294967296L, 17179869184L, 68719476736L, 274877906944L, 1099511627776L, 4398046511104L, 17592186044416L, 70368744177664L, 281474976710656L, 1125899906842624L, 4503599627370496L, 18014398509481984L, 72057594037927936L, 288230376151711744L, 1152921504606846976L, 4611686018427387904L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 8L, 33L, 135L, 540L, 2160L, 8640L, 34560L, 138240L, 552960L, 2211840L, 8847360L, 35389440L, 141557760L, 566231040L, 2264924160L, 9059696640L, 36238786560L, 144955146240L, 579820584960L, 2319282339840L, 9277129359360L, 37108517437440L, 148434069749760L, 593736278999040L, 2374945115996160L, 9499780463984640L, 37999121855938560L, 151996487423754240L, 607985949695016960L, 2431943798780067840L, -8718968878589280256L, 2017612633061982208L, 8070450532247928832L, -4611686018427387904L,},
            {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 16L, 256L, 4096L, 65536L, 1048576L, 16777216L, 268435456L, 4294967296L, 68719476736L, 1099511627776L, 17592186044416L, 281474976710656L, 4503599627370496L, 72057594037927936L, 1152921504606846976L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 8L, 135L, 2160L, 34560L, 552960L, 8847360L, 141557760L, 2264924160L, 36238786560L, 579820584960L, 9277129359360L, 148434069749760L, 2374945115996160L, 37999121855938560L, 607985949695016960L, -8718968878589280256L, 8070450532247928832L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 4L, 64L, 1025L, 16405L, 262480L, 4199680L, 67194880L, 1075118080L, 17201889280L, 275230228480L, 4403683655680L, 70458938490880L, 1127343015854080L, 18037488253665280L, 288599812058644480L, 4617596992938311680L, 94575592174780416L, 1513209474796486656L, 5764607523034234880L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 33L, 540L, 8650L, 138414L, 2214635L, 35434160L, 566946560L, 9071144960L, 145138319360L, 2322213109760L, 37155409756160L, 594486556098560L, 9511784897576960L, 152188558361231360L, 2435016933779701760L, 2066782793056124928L, -3824963458521104384L, -5859183115209015296L, -1513209474796486656L, -5764607523034234880L,},
            {0L, 0L, 0L, 0L, 1L, 65536L, 4294967296L, 281474976710656L, 0L, 0L, 0L, 0L, 135L, 8847360L, 579820584960L, 37999121855938560L, 0L, 0L, 0L, 0L, 16405L, 1075118080L, 70458938490880L, 4617596992938311680L, 0L, 0L, 0L, 33L, 2214635L, 145138319360L, 9511784897576960L, -3824963458521104384L, 0L, 0L, 0L, 4096L, 268435729L, 17592203935744L, 1152922677132918784L, 76842668642009088L, 0L, 0L, 8L, 552960L, 36238823415L, 2374947531325440L, 8070608823267622912L, -8072983807038324736L, 0L, 0L, 1025L, 67194948L, 4403688133701L, 288600105530228736L, 5783840476780036096L, 6072259672578981888L, 0L, 2L, 138414L, 9071137783L, 594486085783387L, 2066751970480947200L, -7784595809881817088L, -8116893903405187072L, 0L, 256L, 16777216L, 1099511627777L, 72057594037993729L, 4311810048L, 282578783305728L, 72339069014638592L, 0L, 34560L, 2264924160L, 148434069749895L, -8718968878580398201L, 582094356480L, 38148135746273280L, -8680969756733341696L, 64L, 4199680L, 275230228480L, 18037488253681749L, 1513209475875820821L, 70735243837440L, 4635704940130467840L, 6130806467734798336L, 8650L, 566946560L, 37155409756193L, 2435016933781924608L, -1513209329119911445L, 9547060033028096L, -1513172181595455488L, 2444047222778626064L, 1048577L, 68719546624L, 4503604207554576L, 300166943871248L, 1224996759836561425L, 1157443864920915968L, 1229500363472633856L, 1157706579210930288L, 141557903L, 9277138794248L, 607986568019867768L, 40522537422618488L, -646134085450172169L, 8680969174647242752L, -38147594580393980L, 8716435603799146832L, 17201906772L, 1127344162226437L, 94650720833590549L, 4923631783780892757L, 4685244537110860101L, 6130877201840930816L, 4635630379498209820L, 1244400872073244307L, 2322211272589L, 152188437960410544L, -5867073703402004022L, -608753751841641693L, 5021550739930207323L, 2435017087666290689L, -1503124363304435712L, -3144919910493192192L,},
            {0L, 0L, 0L, 0L, 0L, 64L, 1048577L, 17201906772L, 281474976710656L, 4617596992938311680L, 76842668642009088L, 6072259672578982913L, 72339069031416064L, 6130806742969226560L, 1153203052884330849L, 1157782445615873751L, 579820584961L, 9511784897593365L, 8070608823536058641L, -7784600210876641212L, 110205729801044225L, -144078168321075883L, -1267647958053027836L, -6091464713332260860L, 37718223479898112L, -8439856759865868255L, -1520019152602112000L, 2066179544731861937L, -8790955200529267002L, -1283002820928252668L, -4393868575610878703L, -8449827974931331169L, 2214634L, 36238839778L, 594485817347658L, -8718964474892790846L, -1585266923157774102L, -2159343561325343640L, 6102432311525229764L, 4685247241576882715L, 47229297740208874L, -362891705061236857L, 1278195543263542851L, 620531388636797133L, -8671859433737046147L, 3764271757107747080L, -49275413924168452L, -3815288643469601315L, 9440922234374756L, 6926822170519886258L, -6651454504879848283L, 4915504155783729170L, -3484674958185996779L, -597093896533037833L, -101418331062955185L, 114374535351053440L, -8401377022845295360L, 309373867683388309L, -7588675606746223355L, 4613883564350178627L, -5490419497752360351L, -4092579689755225393L, -6360733425675343297L, -3866029447188566391L, 0L, 0L, 8650L, 141557903L, 2322211272653L, 37999121856995723L, -3824963441187076902L, -8073262976963726383L, -3474527112516199252L, 893964528298002176L, -339984616997073166L, -6154158995214854398L, -6104810424141741897L, 7277642788833580637L, 6960116411131671538L, 4071617767058694878L, 9737097069319014L, -6380455974756021144L, 5306191551079440042L, 3269183148812976300L, -3174994427595402801L, -6131026350209149615L, 2441091259941327421L, -6376488461461413284L, -3762257331689188651L, 3011294698857333528L, -8979154920095307072L, 5790529039759082619L, 1239587464508094929L, -4662118527344363338L, -9058078951095808040L, 6962556734789393032L, 1513803927051820752L, -7637532433008211760L, 3172589756402942491L, -8139586777070889653L, -2614045420302706506L, 5489620768593913951L, 9017284959903041451L, -5861285940415577809L, -2351551952095471592L, 3535063371018323558L, 2420755486704154537L, -5877264004611716212L, 129845210948916022L, 5282337198046751722L, 5832803845519586466L, -8209075021032122910L, -5254194667358736461L, 5505597360763312372L, 5218623165732545559L, -99478273273829370L, 5210655008025503160L, 1173331236432755084L, 8448787890364737669L, -885736594065092634L, 5251987614441995959L, 6268787642900494643L, -5784373220632514025L, -7273787044337369771L, -3198632384775138717L, -5828623507231841502L, -4119520046862348844L, -7972771989431016499L,},
            {0L, 1153203052884330849L, -8790673725552556346L, -2683758288860348917L, -8401095002407738111L, 2889165707173743579L, 68101315650465790L, 1562134674829423224L, -5254195195637570216L, -4164882442621421793L, 4149125665157805033L, 8738459521350970817L, 5800209625785548884L, 352018473700258515L, -3850379364716477814L, -2033713755946111198L, 121560905306496990L, 1204229240181236519L, -4721235023918954521L, 1470366155203677288L, -62401654963139720L, 3248050847003094190L, -7039270657567564170L, -7247908971244112235L, -983031944651095638L, 4662775862049384401L, 6705559872769278787L, 5483836971902443759L, -8649090365951993345L, -6931729852689429431L, -4636479641136796048L, -1166035260420367357L, 1275823829218972994L, -2989509209396316781L, -8758845536459163034L, -7304766135272341552L, 8194244157860984428L, -9004843466638962837L, -8413155290595263020L, -647010578758267634L, 6155663128708844124L, -5198713762262794861L, 8445328495415092315L, 5014122176303582487L, 4152687406615858604L, 8664268483925047533L, 2396231184934817666L, -8982247211434980198L, 8720609536008050639L, 1289826217462475553L, 7310260024393673344L, -7528016407982342086L, -6957429739767435212L, -2998353763668465317L, 639781338402503479L, 4178618090573301487L, -7313459263323893877L, -3017272618775100402L, 4346708125617423576L, -1263220805681695378L, 3479549138835978840L, -31177483471517927L, -3308418818131185309L, 2971227868022152746L, -8960734616535541869L, 2726416716411923402L, 8655217597162246152L, 5891293224563082311L, -8114385822918414236L, -24173566545082488L, 3525131092324361751L, 129137734765373761L, -4634202266145536557L, -2724064043747681601L, -7869071894491151171L, 877575637717611480L, -5307011731640059811L, -5322961342013373631L, 6971037859797426099L, 6368961100732007985L, -5770993013660643240L, 1537663309576457936L, 4942143791259220272L, -5317904921855576967L, -5210510140406310487L, -5476547723192756037L, 4450207159754616145L, 322401679342521962L, -4669782175494119505L, -6126592005355277175L, -8172090415045660972L, 7917415279540041764L, 5538127450439635585L, 3829392249676792989L, -7599956644002353139L, -9012081509067160437L, -3584204653690651130L, 7010722352093779390L, -7590286767394264082L, -866000121309252184L, 8141866661770748704L, -5005031118645325700L, 6380420891641782384L, -4701994958018568955L, 4122403476705235626L, 8212311678941151364L, 7886766038441860051L, 1799621748682239740L, 2431917956628772813L, -1518915629014114793L, -401867667395443986L, 4733246405766724749L, 3813847257854965934L, 3306371949114663583L, 8731947646258574233L, 641083806156757049L, -671981730131540374L, 5009765024409955304L, -2907460853318825569L, -8709097205547024511L, -8408975391294782986L, 4239879423876489464L, 1444340210671530418L, -4690417545425921977L, 8361087994085011047L, -4674995572199555208L, 4400576989148284218L, 1366052557422390714L,},
            {0L, 8659589312323760152L, -3547956750118735089L, 2982042578881868888L, -3832085145505867169L, -1497995561223068066L, 2886027828750812195L, 7570697103831142837L, -3173568925918032345L, -653372234594881765L, -8494491290844571110L, 4926834931788935286L, 4095224726528149594L, -7835019665894035202L, 2037534085254985694L, -125371797649007139L, 2355420958129503240L, 1196401856147756014L, 8076878831086738077L, -642417015353526614L, -2104870688571513820L, 8385596987019353138L, 8964636097145564200L, 6686119355416055550L, -4918657685483627970L, -295942392015864279L, 4721804785027451207L, -2413788570542207019L, -4685648697110632684L, 69373354900583428L, 4747189252100065260L, -6766130389026531307L, 2045230472588668078L, 2905990416553949276L, -4078743357368282514L, -8184215249602648352L, -6192282069069163217L, -4400233786548083538L, 2372143014713051176L, 8723583879929629581L, -422897008404695248L, 6996595221413911015L, -2127783570184008768L, 6702471325085075137L, -7877343611794070032L, -3195112488000443230L, -2334622471427236474L, -4745871902567224552L, 7528935820187120865L, 5614340613776287350L, 968736815998115890L, -1471698763596120511L, 8116575859714709362L, -2307213851903634477L, 6403221953230986233L, -3513314703210137116L, 3785023707099102876L, -6638910027776354387L, 6069486029693196661L, 7210351041979397097L, 2737340632856305475L, 4931961743520027382L, -3522462070029389294L, 991158653945758800L, -1537070695087853598L, 8677704708297427166L, 7537246982600064921L, 136916870589222065L, -7546238680064236L, -1830219053754806928L, -75897692522329956L, -5893608300642644072L, -371100081558377117L, -8782000081581573815L, -709730937878093197L, -8717235720752843499L, 1741659678480257130L, -7558698018806762920L, -7325520361167018335L, -4906716339968503288L, 6746195095413414986L, 1167021386904033601L, 7892263315838423276L, 7221339814344157647L, -1200315195670352102L, 709366267425963628L, -7268220523937650506L, 9042821790702098813L, 5872381623396477857L, 7343360320709807287L, 3871029645444692433L, -5766897046774725335L, 6638067531159550035L, 2946246468688414964L, 8118335098925794174L, -3592211528699097894L, 5322066900562782071L, -127066791464488423L, 601388390396601332L, -6920695479771097055L, 3277969500094484575L, 3023534234363951898L, -7247676339884672874L, -7280490446944984161L, -331425020945406191L, -3810150255760720486L, 6432345385469278842L, 6670481239395236198L, -8738097248168055188L, 972110374213260599L, -3567517575985044119L, -1529047926074146187L, -3313070427565521752L, 7339208553434454960L, -3749706224430709614L, -1745240768797437780L, -1282777023273993626L, 8441949412758551983L, 8391827184863450460L, 6361662885969268775L, 4650340234512947324L, -854265055350694489L, 4413456901128749528L, 1801544646835972554L, -2635750008334037505L, -8379246747899967906L, 4134287477106536979L, -8297974236062728528L,},
            {0L, 7018050686010536633L, 8979387000427695043L, -6396153838970033420L, -4411981507360459181L, 1467100020558064840L, -4342411256721761368L, 3170920490659491507L, -2079064712326181121L, -41708757641105866L, -8399905007867180772L, 8176506819436572352L, -595280527987765292L, 1161882881951105756L, 8405196619039125092L, -5012388597926287745L, -4645387622044074759L, -6650157255874097753L, 4931735601626587163L, -6142203401637223909L, -6773412655384058318L, 8986325528453096625L, -4981601614866114062L, -417087942712267290L, 8181201251974677183L, -4678768276496084306L, -4179155451819723645L, 2385753524776925667L, -1777003556303304736L, 7573828607010589779L, 8778569049276226677L, 8178481561008481706L, 8381183291851622377L, -2640430494721803455L, -2378935462977812527L, 7805604481322988507L, 4413452620636959607L, -5801533469814214363L, -25716006858475136L, 2972949384725815145L, -2645512640657976852L, -139929736788656722L, -8754412949400607204L, 2976487497806223369L, 9052616844957461095L, -9001581212338276188L, 6740345476854524798L, 2634223566830891975L, -6074331114088046694L, 7610835367867842372L, 7295764191396655787L, 418070747408268147L, -4652973268787502582L, 4918457134749574876L, 636890330715642409L, -2912341114313865102L, -6348125743482735685L, 4919457392445605508L, 5207269926927816312L, -3514722820144238757L, -8399735652979558504L, 7330602027269546571L, -1163758275708006247L, 4369418009356453649L, -635770533438645010L, -5799855803674311593L, 4631829377996547695L, -7508629093327187147L, 974544404439160974L, 8096009817908830778L, 5025073647759428432L, -392427873776119051L, -1859734805655601561L, 5880265107738832091L, -5300219337258226255L, 5575851796089708244L, 4980088464146957398L, 3474307479781260744L, 8673477725105754433L, -3880357806051544887L, 383721979091975346L, -604762363905231959L, 143389310024667579L, 1543336429576982055L, -3815174451387511125L, 8179770937137477739L, 4326357083549020469L, -6391033970141200412L, -3224145432086430844L, 3553735556684142476L, -2891657421962130642L, -7591088766367253471L, -3798799833952960430L, 5839842308966692277L, 1231082262565435444L, 22104168097291008L, -5802503661952867926L, -8653030068695374349L, 658490006237019080L, 4916652639637107928L, 3595178756318358582L, 2378993905395329351L, 5605745882647825857L, 8963932254918013120L, 2622313516732559638L, -6182176429886238069L, 7871577098023474047L, -5603407109177757798L, 7325506250133437601L, 2389525755169413370L, 8762684065317943126L, 3495859960928443629L, -7505822694752159328L, -3886129878063709638L, 4118680111085716335L, -613932100253164715L, 1281330033509407976L, 4754063905186489801L, -3496836182886919794L, 3497408602986041283L, -5314222618258205639L, 4502805151495160275L, 7264373795736868731L, -53716532843453178L, -7920048165691046145L, 5298070393408924727L, -6374952378978153761L, -4853244472775421678L,},
    };

    //The tables above were generated by the code below. The code is no longer needed.

    /* *******************************************************************************************
    static long [][] powTable0 = new long [7] [];
    static long [][] powTable1 = new long [7] [];

    public static void genPowTable() {
        GF2_128 z = new GF2_128();
        int i;

        powTable0[0] = new long [128];
        powTable1[0] = new long [128];
        i = 0;
        for (; i<64; i++)  {
            z.word[0] = 1L<<i;
            z.word[1] = 0L;
            mul(z, z, z);
            powTable0[0][i] = z.word[0];
            powTable1[0][i] = z.word[1];
        }
        for (; i<128; i++)  {
            z.word[0] = 0L;
            z.word[1] = 1L<<(i-64);;
            mul(z, z, z);
            powTable0[0][i] = z.word[0];
            powTable1[0][i] = z.word[1];
        }


        for (int k = 1; k<powTable0.length; k++) {
            powTable0[k] = new long [128];
            powTable1[k] = new long [128];
            i = 0;
            for (; i<64; i++)  {
                z.word[0] = 1L<<i;
                z.word[1] = 0L;
                power2To2ToK(z, z, k-1);
                power2To2ToK(z, z, k-1);
                powTable0[k][i] = z.word[0];
                powTable1[k][i] = z.word[1];
            }
            for (; i<128; i++)  {
                z.word[0] = 0L;
                z.word[1] = 1L<<(i-64);
                power2To2ToK(z, z, k-1);
                power2To2ToK(z, z, k-1);
                powTable0[k][i] = z.word[0];
                powTable1[k][i] = z.word[1];
            }
        }

        String s = "private static final long [][] powTable0 = {\n";
        for (long [] t:powTable0) {
            s+="{";
            for (long v:t) {
                s+=""+v+"L,";
            }
            s+="},\n";
        }
        s+="};";
        System.out.println(s);

        s = "private static final long [][] powTable1 = {\n";
        for (long [] t:powTable1) {
            s+="{";
            for (long v:t) {
                s+=""+v+"L,";
            }
            s+="},\n";
        }
        s+="};";
        System.out.println(s);

    }***************************************************************************/

    /**
     * Squares z and puts the result into res. Same as power2To2ToK(res, z, 0).
     * About the same efficiency as mul(res, z, z) (more efficient implementations are possible,
     * but not provided here because of risk of side-channel attacks)
     * @param res output; must be not null; may be equal to z
     * @param z input to be squared; may be equal to res, in which case will get overwritten
     */

    public static void sqr(GF2_128 res, GF2_128 z) {
        // It is possible to precompute the square of every byte value in every byte position
        // (only bytes in byte position 0, 16, and 31 are needed -- squares of bytes in other positions
        // can be figured out by shifting squares of bytes in positions 0 and 16). This will result in a slightly
        // bigger table and about 10 times more efficient squaring. However, because table lookups will
        // be input-dependent, this gives a higher risk of side-channel attacks that reveal z.
        // Hence, it's not implemented.
        power2To2ToK(res, z, 0);
    }

    /**
     * Raises z to the power 2^{2^k} and puts the result into res. Same sqr(z, z) 2^k times.
     * Takes only about as much time as mul(res, z, z) (even more efficient implementations are possible,
     * but not provided here because of risk of side-channel attacks)
     * @param res output; must be not null; may be equal to z
     * @param z input to be squared; may be equal to res, in which case will get overwritten
     */

    public static void power2To2ToK(GF2_128 res, GF2_128 z, int k) {
        if (k>=7) {
            // By Fermat's little theorem, z^{2^{2^k}} = z^{2^{2^k} mod (2^{128}-1)}
            // If k>=7, then 2^{2^k} mod (2^{128}-1) = 1 (proof below), and so z^{2^{2^k)} = z^1 = z,
            // so we just copy z into res.
            // Here's the proof 2^{2^k} mod (2^{128}-1) = 1 for k>=7:
            // (2^128-1)*(2^128+1)*(2^256+1)*...*(2^{2^{k-1}}+1)  =
            // (2^256-1)*(2^256+1)*...*(2^{2^{k-1}}+1) =
            // (2^512-1)*(2^512+1)*...*(2^{2^{k-1}}+1) =
            // 2^{2^k}-1 and thus 2^{2^k}-1 is divisible by 2^128 - 1.
            res.word[0] = z.word[0];
            res.word[1] = z.word[1];
        }
        else {
            // powTable0[k][i] contains the result of raising x^i to the power 2^k for i = 0...63
            // powTable1[k][i-64] contains the result of raising x^i to the power 2^k for i = 64...127
            // Because raising to the power 2^k is linear over any field of characteristic 2,
            // we just need to XOR the values in these tables at indices i where z is 1.
            // This selection is done via multiplication by 0 or 1, to avoid having an input-dependent path
            // through the code, thus reducing the chance of side-channel attacks.
            //
            // Note that more efficient tables can be precomputed -- for example, the result of raising
            // every one of 16 possible 4-bit nibbles at every one of 32 possible nibble positions.
            // But indexing into these tables will be input-dependent, which may make side-channel attacks easier.

            long t0 = 0;
            long t1 = 0;
            int maxIndex = 0, i = 0;
            for (long w : z.word) {
                maxIndex += 64;
                for (; i < maxIndex; i++) {
                    long multiplier = (w & 1);
                    // No "if w&1 == 0" here, to avoid a data-dependent path through the code,
                    // thus reducing the chance of side channel attacks
                    t0 ^= powTable0[k][i] * multiplier;
                    t1 ^= powTable1[k][i] * multiplier;
                    w >>>= 1;
                }
            }
            res.word[0] = t0;
            res.word[1] = t1;
        }
    }

    /**
     *
     * @return bits of this in hexadecimal notation, most significant on the left
     */
    public String toString() {
       return String.format("%016X", word[1])+String.format("%016X", word[0]);
    }
}

